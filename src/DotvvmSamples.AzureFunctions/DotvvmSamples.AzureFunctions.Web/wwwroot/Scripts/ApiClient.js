var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DotvvmSamples;
(function (DotvvmSamples) {
    var AzureFunctions;
    (function (AzureFunctions) {
        var Web;
        (function (Web) {
            var Api;
            (function (Api) {
                var ClientBase = /** @class */ (function () {
                    function ClientBase() {
                    }
                    ClientBase.prototype.transformOptions = function (options) {
                        options.credentials = "same-origin";
                        return Promise.resolve(options);
                    };
                    return ClientBase;
                }());
                /* tslint:disable */
                //----------------------
                // <auto-generated>
                //     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
                // </auto-generated>
                //----------------------
                // ReSharper disable InconsistentNaming
                var Client = /** @class */ (function (_super) {
                    __extends(Client, _super);
                    function Client(baseUrl, http) {
                        var _this = _super.call(this) || this;
                        _this.jsonParseReviver = undefined;
                        _this.http = http ? http : window;
                        _this.baseUrl = baseUrl ? baseUrl : "https://dotvvmsamplesazurefunctions.azurewebsites.net/api";
                        return _this;
                    }
                    /**
                     * Publishes a result of the test run
                     * @body Test run result object
                     * @return successful operation
                     */
                    Client.prototype.postPublish = function (body) {
                        var _this = this;
                        var url_ = this.baseUrl + "/publish";
                        url_ = url_.replace(/[?&]$/, "");
                        var content_ = JSON.stringify(body);
                        var options_ = {
                            body: content_,
                            method: "POST",
                            headers: new Headers({
                                "Content-Type": "application/json",
                                "Accept": "application/json"
                            })
                        };
                        return this.transformOptions(options_).then(function (transformedOptions_) {
                            return _this.http.fetch(url_, transformedOptions_);
                        }).then(function (_response) {
                            return _this.processPostPublish(_response);
                        });
                    };
                    Client.prototype.processPostPublish = function (response) {
                        var _this = this;
                        var status = response.status;
                        var _headers = {};
                        if (response.headers && response.headers.forEach) {
                            response.headers.forEach(function (v, k) { return _headers[k] = v; });
                        }
                        ;
                        if (status === 200) {
                            return response.text().then(function (_responseText) {
                                var result200 = null;
                                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                result200 = resultData200 ? TestRunInputResult.fromJS(resultData200) : new TestRunInputResult();
                                return result200;
                            });
                        }
                        else if (status === 400) {
                            return response.text().then(function (_responseText) {
                                return throwException("A server error occurred.", status, _responseText, _headers);
                            });
                        }
                        else if (status !== 200 && status !== 204) {
                            return response.text().then(function (_responseText) {
                                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                            });
                        }
                        return Promise.resolve(null);
                    };
                    /**
                     * Gets a list of projects
                     * @return successful operation
                     */
                    Client.prototype.getProjects = function () {
                        var _this = this;
                        var url_ = this.baseUrl + "/projects";
                        url_ = url_.replace(/[?&]$/, "");
                        var options_ = {
                            method: "GET",
                            headers: new Headers({
                                "Content-Type": "application/json",
                                "Accept": "application/json"
                            })
                        };
                        return this.transformOptions(options_).then(function (transformedOptions_) {
                            return _this.http.fetch(url_, transformedOptions_);
                        }).then(function (_response) {
                            return _this.processGetProjects(_response);
                        });
                    };
                    Client.prototype.processGetProjects = function (response) {
                        var _this = this;
                        var status = response.status;
                        var _headers = {};
                        if (response.headers && response.headers.forEach) {
                            response.headers.forEach(function (v, k) { return _headers[k] = v; });
                        }
                        ;
                        if (status === 200) {
                            return response.text().then(function (_responseText) {
                                var result200 = null;
                                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                if (resultData200 && resultData200.constructor === Array) {
                                    result200 = [];
                                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                                        var item = resultData200_1[_i];
                                        result200.push(item);
                                    }
                                }
                                return result200;
                            });
                        }
                        else if (status !== 200 && status !== 204) {
                            return response.text().then(function (_responseText) {
                                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                            });
                        }
                        return Promise.resolve(null);
                    };
                    /**
                     * Gets a list of test suites
                     * @return successful operation
                     */
                    Client.prototype.getTestSuites = function (projectName) {
                        var _this = this;
                        var url_ = this.baseUrl + "/testSuites/{projectName}";
                        if (projectName === undefined || projectName === null)
                            throw new Error("The parameter 'projectName' must be defined.");
                        url_ = url_.replace("{projectName}", encodeURIComponent("" + projectName));
                        url_ = url_.replace(/[?&]$/, "");
                        var options_ = {
                            method: "GET",
                            headers: new Headers({
                                "Content-Type": "application/json",
                                "Accept": "application/json"
                            })
                        };
                        return this.transformOptions(options_).then(function (transformedOptions_) {
                            return _this.http.fetch(url_, transformedOptions_);
                        }).then(function (_response) {
                            return _this.processGetTestSuites(_response);
                        });
                    };
                    Client.prototype.processGetTestSuites = function (response) {
                        var _this = this;
                        var status = response.status;
                        var _headers = {};
                        if (response.headers && response.headers.forEach) {
                            response.headers.forEach(function (v, k) { return _headers[k] = v; });
                        }
                        ;
                        if (status === 200) {
                            return response.text().then(function (_responseText) {
                                var result200 = null;
                                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                if (resultData200 && resultData200.constructor === Array) {
                                    result200 = [];
                                    for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                                        var item = resultData200_2[_i];
                                        result200.push(TestSuiteListData.fromJS(item));
                                    }
                                }
                                return result200;
                            });
                        }
                        else if (status !== 200 && status !== 204) {
                            return response.text().then(function (_responseText) {
                                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                            });
                        }
                        return Promise.resolve(null);
                    };
                    /**
                     * Gets the results of a specified test suite
                     * @return successful operation
                     */
                    Client.prototype.getResults = function (projectName, testSuiteName, buildNumber) {
                        var _this = this;
                        var url_ = this.baseUrl + "/results/{projectName}/{testSuiteName}/{buildNumber}";
                        if (projectName === undefined || projectName === null)
                            throw new Error("The parameter 'projectName' must be defined.");
                        url_ = url_.replace("{projectName}", encodeURIComponent("" + projectName));
                        if (testSuiteName === undefined || testSuiteName === null)
                            throw new Error("The parameter 'testSuiteName' must be defined.");
                        url_ = url_.replace("{testSuiteName}", encodeURIComponent("" + testSuiteName));
                        if (buildNumber === undefined || buildNumber === null)
                            throw new Error("The parameter 'buildNumber' must be defined.");
                        url_ = url_.replace("{buildNumber}", encodeURIComponent("" + buildNumber));
                        url_ = url_.replace(/[?&]$/, "");
                        var options_ = {
                            method: "GET",
                            headers: new Headers({
                                "Content-Type": "application/json",
                                "Accept": "application/json"
                            })
                        };
                        return this.transformOptions(options_).then(function (transformedOptions_) {
                            return _this.http.fetch(url_, transformedOptions_);
                        }).then(function (_response) {
                            return _this.processGetResults(_response);
                        });
                    };
                    Client.prototype.processGetResults = function (response) {
                        var _this = this;
                        var status = response.status;
                        var _headers = {};
                        if (response.headers && response.headers.forEach) {
                            response.headers.forEach(function (v, k) { return _headers[k] = v; });
                        }
                        ;
                        if (status === 200) {
                            return response.text().then(function (_responseText) {
                                var result200 = null;
                                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                result200 = resultData200 ? TestSuiteOutputData.fromJS(resultData200) : new TestSuiteOutputData();
                                return result200;
                            });
                        }
                        else if (status !== 200 && status !== 204) {
                            return response.text().then(function (_responseText) {
                                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                            });
                        }
                        return Promise.resolve(null);
                    };
                    /**
                     * Gets the results of a specified test suite
                     * @return successful operation
                     */
                    Client.prototype.getTestOutput = function (projectName, testSuiteName, buildNumber, testFullName) {
                        var _this = this;
                        var url_ = this.baseUrl + "/testOutput/{projectName}/{testSuiteName}/{buildNumber}/{testFullName}";
                        if (projectName === undefined || projectName === null)
                            throw new Error("The parameter 'projectName' must be defined.");
                        url_ = url_.replace("{projectName}", encodeURIComponent("" + projectName));
                        if (testSuiteName === undefined || testSuiteName === null)
                            throw new Error("The parameter 'testSuiteName' must be defined.");
                        url_ = url_.replace("{testSuiteName}", encodeURIComponent("" + testSuiteName));
                        if (buildNumber === undefined || buildNumber === null)
                            throw new Error("The parameter 'buildNumber' must be defined.");
                        url_ = url_.replace("{buildNumber}", encodeURIComponent("" + buildNumber));
                        if (testFullName === undefined || testFullName === null)
                            throw new Error("The parameter 'testFullName' must be defined.");
                        url_ = url_.replace("{testFullName}", encodeURIComponent("" + testFullName));
                        url_ = url_.replace(/[?&]$/, "");
                        var options_ = {
                            method: "GET",
                            headers: new Headers({
                                "Content-Type": "application/json",
                                "Accept": "application/json"
                            })
                        };
                        return this.transformOptions(options_).then(function (transformedOptions_) {
                            return _this.http.fetch(url_, transformedOptions_);
                        }).then(function (_response) {
                            return _this.processGetTestOutput(_response);
                        });
                    };
                    Client.prototype.processGetTestOutput = function (response) {
                        var _this = this;
                        var status = response.status;
                        var _headers = {};
                        if (response.headers && response.headers.forEach) {
                            response.headers.forEach(function (v, k) { return _headers[k] = v; });
                        }
                        ;
                        if (status === 200) {
                            return response.text().then(function (_responseText) {
                                var result200 = null;
                                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                                result200 = resultData200 !== undefined ? resultData200 : null;
                                return result200;
                            });
                        }
                        else if (status !== 200 && status !== 204) {
                            return response.text().then(function (_responseText) {
                                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                            });
                        }
                        return Promise.resolve(null);
                    };
                    return Client;
                }(ClientBase));
                Api.Client = Client;
                var TestRunInputData = /** @class */ (function () {
                    function TestRunInputData(data) {
                        if (data) {
                            for (var property in data) {
                                if (data.hasOwnProperty(property))
                                    this[property] = data[property];
                            }
                        }
                    }
                    TestRunInputData.prototype.init = function (data) {
                        if (data) {
                            this.projectName = data["projectName"] !== undefined ? data["projectName"] : null;
                            this.testSuiteName = data["testSuiteName"] !== undefined ? data["testSuiteName"] : null;
                            this.buildNumber = data["buildNumber"] !== undefined ? data["buildNumber"] : null;
                            this.testFullName = data["testFullName"] !== undefined ? data["testFullName"] : null;
                            this.testResult = data["testResult"] !== undefined ? data["testResult"] : null;
                            this.testOutput = data["testOutput"] !== undefined ? data["testOutput"] : null;
                            if (data["attachments"] && data["attachments"].constructor === Array) {
                                this.attachments = [];
                                for (var _i = 0, _a = data["attachments"]; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    this.attachments.push(TestRunAttachmentInputData.fromJS(item));
                                }
                            }
                        }
                    };
                    TestRunInputData.fromJS = function (data) {
                        var result = new TestRunInputData();
                        result.init(data);
                        return result;
                    };
                    TestRunInputData.prototype.toJSON = function (data) {
                        data = typeof data === 'object' ? data : {};
                        data["projectName"] = this.projectName !== undefined ? this.projectName : null;
                        data["testSuiteName"] = this.testSuiteName !== undefined ? this.testSuiteName : null;
                        data["buildNumber"] = this.buildNumber !== undefined ? this.buildNumber : null;
                        data["testFullName"] = this.testFullName !== undefined ? this.testFullName : null;
                        data["testResult"] = this.testResult !== undefined ? this.testResult : null;
                        data["testOutput"] = this.testOutput !== undefined ? this.testOutput : null;
                        if (this.attachments && this.attachments.constructor === Array) {
                            data["attachments"] = [];
                            for (var _i = 0, _a = this.attachments; _i < _a.length; _i++) {
                                var item = _a[_i];
                                data["attachments"].push(item.toJSON());
                            }
                        }
                        return data;
                    };
                    return TestRunInputData;
                }());
                Api.TestRunInputData = TestRunInputData;
                var TestRunAttachmentInputData = /** @class */ (function () {
                    function TestRunAttachmentInputData(data) {
                        if (data) {
                            for (var property in data) {
                                if (data.hasOwnProperty(property))
                                    this[property] = data[property];
                            }
                        }
                    }
                    TestRunAttachmentInputData.prototype.init = function (data) {
                        if (data) {
                            this.fileName = data["fileName"] !== undefined ? data["fileName"] : null;
                            this.contentBase64 = data["contentBase64"] !== undefined ? data["contentBase64"] : null;
                        }
                    };
                    TestRunAttachmentInputData.fromJS = function (data) {
                        var result = new TestRunAttachmentInputData();
                        result.init(data);
                        return result;
                    };
                    TestRunAttachmentInputData.prototype.toJSON = function (data) {
                        data = typeof data === 'object' ? data : {};
                        data["fileName"] = this.fileName !== undefined ? this.fileName : null;
                        data["contentBase64"] = this.contentBase64 !== undefined ? this.contentBase64 : null;
                        return data;
                    };
                    return TestRunAttachmentInputData;
                }());
                Api.TestRunAttachmentInputData = TestRunAttachmentInputData;
                var TestRunInputResult = /** @class */ (function () {
                    function TestRunInputResult(data) {
                        if (data) {
                            for (var property in data) {
                                if (data.hasOwnProperty(property))
                                    this[property] = data[property];
                            }
                        }
                    }
                    TestRunInputResult.prototype.init = function (data) {
                        if (data) {
                            this.testSuiteUrl = data["testSuiteUrl"] !== undefined ? data["testSuiteUrl"] : null;
                            this.testResultUrl = data["testResultUrl"] !== undefined ? data["testResultUrl"] : null;
                        }
                    };
                    TestRunInputResult.fromJS = function (data) {
                        var result = new TestRunInputResult();
                        result.init(data);
                        return result;
                    };
                    TestRunInputResult.prototype.toJSON = function (data) {
                        data = typeof data === 'object' ? data : {};
                        data["testSuiteUrl"] = this.testSuiteUrl !== undefined ? this.testSuiteUrl : null;
                        data["testResultUrl"] = this.testResultUrl !== undefined ? this.testResultUrl : null;
                        return data;
                    };
                    return TestRunInputResult;
                }());
                Api.TestRunInputResult = TestRunInputResult;
                var TestSuiteListData = /** @class */ (function () {
                    function TestSuiteListData(data) {
                        if (data) {
                            for (var property in data) {
                                if (data.hasOwnProperty(property))
                                    this[property] = data[property];
                            }
                        }
                    }
                    TestSuiteListData.prototype.init = function (data) {
                        if (data) {
                            this.testSuiteName = data["testSuiteName"] !== undefined ? data["testSuiteName"] : null;
                            this.buildNumber = data["buildNumber"] !== undefined ? data["buildNumber"] : null;
                            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : null;
                        }
                    };
                    TestSuiteListData.fromJS = function (data) {
                        var result = new TestSuiteListData();
                        result.init(data);
                        return result;
                    };
                    TestSuiteListData.prototype.toJSON = function (data) {
                        data = typeof data === 'object' ? data : {};
                        data["testSuiteName"] = this.testSuiteName !== undefined ? this.testSuiteName : null;
                        data["buildNumber"] = this.buildNumber !== undefined ? this.buildNumber : null;
                        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : null;
                        return data;
                    };
                    return TestSuiteListData;
                }());
                Api.TestSuiteListData = TestSuiteListData;
                var TestSuiteOutputData = /** @class */ (function () {
                    function TestSuiteOutputData(data) {
                        if (data) {
                            for (var property in data) {
                                if (data.hasOwnProperty(property))
                                    this[property] = data[property];
                            }
                        }
                    }
                    TestSuiteOutputData.prototype.init = function (data) {
                        if (data) {
                            this.projectName = data["projectName"] !== undefined ? data["projectName"] : null;
                            this.testSuiteName = data["testSuiteName"] !== undefined ? data["testSuiteName"] : null;
                            this.buildNumber = data["buildNumber"] !== undefined ? data["buildNumber"] : null;
                            if (data["testRuns"] && data["testRuns"].constructor === Array) {
                                this.testRuns = [];
                                for (var _i = 0, _a = data["testRuns"]; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    this.testRuns.push(TestRunOutputData.fromJS(item));
                                }
                            }
                        }
                    };
                    TestSuiteOutputData.fromJS = function (data) {
                        var result = new TestSuiteOutputData();
                        result.init(data);
                        return result;
                    };
                    TestSuiteOutputData.prototype.toJSON = function (data) {
                        data = typeof data === 'object' ? data : {};
                        data["projectName"] = this.projectName !== undefined ? this.projectName : null;
                        data["testSuiteName"] = this.testSuiteName !== undefined ? this.testSuiteName : null;
                        data["buildNumber"] = this.buildNumber !== undefined ? this.buildNumber : null;
                        if (this.testRuns && this.testRuns.constructor === Array) {
                            data["testRuns"] = [];
                            for (var _i = 0, _a = this.testRuns; _i < _a.length; _i++) {
                                var item = _a[_i];
                                data["testRuns"].push(item.toJSON());
                            }
                        }
                        return data;
                    };
                    return TestSuiteOutputData;
                }());
                Api.TestSuiteOutputData = TestSuiteOutputData;
                var TestRunOutputData = /** @class */ (function () {
                    function TestRunOutputData(data) {
                        if (data) {
                            for (var property in data) {
                                if (data.hasOwnProperty(property))
                                    this[property] = data[property];
                            }
                        }
                    }
                    TestRunOutputData.prototype.init = function (data) {
                        if (data) {
                            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : null;
                            this.testFullName = data["testFullName"] !== undefined ? data["testFullName"] : null;
                            this.testResult = data["testResult"] !== undefined ? data["testResult"] : null;
                            this.testOutput = data["testOutput"] !== undefined ? data["testOutput"] : null;
                            this.isFullTestOutput = data["isFullTestOutput"] !== undefined ? data["isFullTestOutput"] : null;
                            if (data["attachments"] && data["attachments"].constructor === Array) {
                                this.attachments = [];
                                for (var _i = 0, _a = data["attachments"]; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    this.attachments.push(TestRunAttachmentOutputData.fromJS(item));
                                }
                            }
                        }
                    };
                    TestRunOutputData.fromJS = function (data) {
                        var result = new TestRunOutputData();
                        result.init(data);
                        return result;
                    };
                    TestRunOutputData.prototype.toJSON = function (data) {
                        data = typeof data === 'object' ? data : {};
                        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : null;
                        data["testFullName"] = this.testFullName !== undefined ? this.testFullName : null;
                        data["testResult"] = this.testResult !== undefined ? this.testResult : null;
                        data["testOutput"] = this.testOutput !== undefined ? this.testOutput : null;
                        data["isFullTestOutput"] = this.isFullTestOutput !== undefined ? this.isFullTestOutput : null;
                        if (this.attachments && this.attachments.constructor === Array) {
                            data["attachments"] = [];
                            for (var _i = 0, _a = this.attachments; _i < _a.length; _i++) {
                                var item = _a[_i];
                                data["attachments"].push(item.toJSON());
                            }
                        }
                        return data;
                    };
                    return TestRunOutputData;
                }());
                Api.TestRunOutputData = TestRunOutputData;
                var TestRunAttachmentOutputData = /** @class */ (function () {
                    function TestRunAttachmentOutputData(data) {
                        if (data) {
                            for (var property in data) {
                                if (data.hasOwnProperty(property))
                                    this[property] = data[property];
                            }
                        }
                    }
                    TestRunAttachmentOutputData.prototype.init = function (data) {
                        if (data) {
                            this.fileName = data["fileName"] !== undefined ? data["fileName"] : null;
                            this.url = data["url"] !== undefined ? data["url"] : null;
                        }
                    };
                    TestRunAttachmentOutputData.fromJS = function (data) {
                        var result = new TestRunAttachmentOutputData();
                        result.init(data);
                        return result;
                    };
                    TestRunAttachmentOutputData.prototype.toJSON = function (data) {
                        data = typeof data === 'object' ? data : {};
                        data["fileName"] = this.fileName !== undefined ? this.fileName : null;
                        data["url"] = this.url !== undefined ? this.url : null;
                        return data;
                    };
                    return TestRunAttachmentOutputData;
                }());
                Api.TestRunAttachmentOutputData = TestRunAttachmentOutputData;
                var SwaggerException = /** @class */ (function (_super) {
                    __extends(SwaggerException, _super);
                    function SwaggerException(message, status, response, headers, result) {
                        var _this = _super.call(this) || this;
                        _this.isSwaggerException = true;
                        _this.message = message;
                        _this.status = status;
                        _this.response = response;
                        _this.headers = headers;
                        _this.result = result;
                        return _this;
                    }
                    SwaggerException.isSwaggerException = function (obj) {
                        return obj.isSwaggerException === true;
                    };
                    return SwaggerException;
                }(Error));
                Api.SwaggerException = SwaggerException;
                function throwException(message, status, response, headers, result) {
                    if (result !== null && result !== undefined)
                        throw result;
                    else
                        throw new SwaggerException(message, status, response, headers, null);
                }
            })(Api = Web.Api || (Web.Api = {}));
        })(Web = AzureFunctions.Web || (AzureFunctions.Web = {}));
    })(AzureFunctions = DotvvmSamples.AzureFunctions || (DotvvmSamples.AzureFunctions = {}));
})(DotvvmSamples || (DotvvmSamples = {}));
