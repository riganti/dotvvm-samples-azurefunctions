namespace DotvvmSamples.AzureFunctions.Web.Api {
    class ClientBase {
        public transformOptions(options: RequestInit) {
            options.credentials = "same-origin";
            return Promise.resolve(options);
        }
    }
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    
    export class Client extends ClientBase {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            super();
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "https://dotvvmsamplesazurefunctions.azurewebsites.net/api";
        }
    
        /**
         * Publishes a result of the test run
         * @body Test run result object
         * @return successful operation
         */
        postPublish(body: TestRunInputData): Promise<TestRunInputResult> {
            let url_ = this.baseUrl + "/publish";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(body);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processPostPublish(_response);
            });
        }
    
        protected processPostPublish(response: Response): Promise<TestRunInputResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? TestRunInputResult.fromJS(resultData200) : new TestRunInputResult();
                return result200;
                });
            } else if (status === 400) {
                return response.text().then((_responseText) => {
                return throwException("A server error occurred.", status, _responseText, _headers);
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<TestRunInputResult>(<any>null);
        }
    
        /**
         * Gets a list of projects
         * @return successful operation
         */
        getProjects(): Promise<string[]> {
            let url_ = this.baseUrl + "/projects";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGetProjects(_response);
            });
        }
    
        protected processGetProjects(response: Response): Promise<string[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(item);
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<string[]>(<any>null);
        }
    
        /**
         * Gets a list of test suites
         * @return successful operation
         */
        getTestSuites(projectName: string): Promise<TestSuiteListData[]> {
            let url_ = this.baseUrl + "/testSuites/{projectName}";
            if (projectName === undefined || projectName === null)
                throw new Error("The parameter 'projectName' must be defined.");
            url_ = url_.replace("{projectName}", encodeURIComponent("" + projectName)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGetTestSuites(_response);
            });
        }
    
        protected processGetTestSuites(response: Response): Promise<TestSuiteListData[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(TestSuiteListData.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<TestSuiteListData[]>(<any>null);
        }
    
        /**
         * Gets the results of a specified test suite
         * @return successful operation
         */
        getResults(projectName: string, testSuiteName: string, buildNumber: string): Promise<TestSuiteOutputData> {
            let url_ = this.baseUrl + "/results/{projectName}/{testSuiteName}/{buildNumber}";
            if (projectName === undefined || projectName === null)
                throw new Error("The parameter 'projectName' must be defined.");
            url_ = url_.replace("{projectName}", encodeURIComponent("" + projectName)); 
            if (testSuiteName === undefined || testSuiteName === null)
                throw new Error("The parameter 'testSuiteName' must be defined.");
            url_ = url_.replace("{testSuiteName}", encodeURIComponent("" + testSuiteName)); 
            if (buildNumber === undefined || buildNumber === null)
                throw new Error("The parameter 'buildNumber' must be defined.");
            url_ = url_.replace("{buildNumber}", encodeURIComponent("" + buildNumber)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGetResults(_response);
            });
        }
    
        protected processGetResults(response: Response): Promise<TestSuiteOutputData> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? TestSuiteOutputData.fromJS(resultData200) : new TestSuiteOutputData();
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<TestSuiteOutputData>(<any>null);
        }
    
        /**
         * Gets the results of a specified test suite
         * @return successful operation
         */
        getTestOutput(projectName: string, testSuiteName: string, buildNumber: string, testFullName: string): Promise<string> {
            let url_ = this.baseUrl + "/testOutput/{projectName}/{testSuiteName}/{buildNumber}/{testFullName}";
            if (projectName === undefined || projectName === null)
                throw new Error("The parameter 'projectName' must be defined.");
            url_ = url_.replace("{projectName}", encodeURIComponent("" + projectName)); 
            if (testSuiteName === undefined || testSuiteName === null)
                throw new Error("The parameter 'testSuiteName' must be defined.");
            url_ = url_.replace("{testSuiteName}", encodeURIComponent("" + testSuiteName)); 
            if (buildNumber === undefined || buildNumber === null)
                throw new Error("The parameter 'buildNumber' must be defined.");
            url_ = url_.replace("{buildNumber}", encodeURIComponent("" + buildNumber)); 
            if (testFullName === undefined || testFullName === null)
                throw new Error("The parameter 'testFullName' must be defined.");
            url_ = url_.replace("{testFullName}", encodeURIComponent("" + testFullName)); 
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processGetTestOutput(_response);
            });
        }
    
        protected processGetTestOutput(response: Response): Promise<string> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<string>(<any>null);
        }
    }
    
    export class TestRunInputData implements ITestRunInputData {
        projectName?: string;
        testSuiteName?: string;
        buildNumber?: string;
        testFullName?: string;
        testResult?: number;
        testOutput?: string;
        attachments?: TestRunAttachmentInputData[];
    
        constructor(data?: ITestRunInputData) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.projectName = data["projectName"] !== undefined ? data["projectName"] : <any>null;
                this.testSuiteName = data["testSuiteName"] !== undefined ? data["testSuiteName"] : <any>null;
                this.buildNumber = data["buildNumber"] !== undefined ? data["buildNumber"] : <any>null;
                this.testFullName = data["testFullName"] !== undefined ? data["testFullName"] : <any>null;
                this.testResult = data["testResult"] !== undefined ? data["testResult"] : <any>null;
                this.testOutput = data["testOutput"] !== undefined ? data["testOutput"] : <any>null;
                if (data["attachments"] && data["attachments"].constructor === Array) {
                    this.attachments = [];
                    for (let item of data["attachments"])
                        this.attachments.push(TestRunAttachmentInputData.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): TestRunInputData {
            let result = new TestRunInputData();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["projectName"] = this.projectName !== undefined ? this.projectName : <any>null;
            data["testSuiteName"] = this.testSuiteName !== undefined ? this.testSuiteName : <any>null;
            data["buildNumber"] = this.buildNumber !== undefined ? this.buildNumber : <any>null;
            data["testFullName"] = this.testFullName !== undefined ? this.testFullName : <any>null;
            data["testResult"] = this.testResult !== undefined ? this.testResult : <any>null;
            data["testOutput"] = this.testOutput !== undefined ? this.testOutput : <any>null;
            if (this.attachments && this.attachments.constructor === Array) {
                data["attachments"] = [];
                for (let item of this.attachments)
                    data["attachments"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface ITestRunInputData {
        projectName?: string;
        testSuiteName?: string;
        buildNumber?: string;
        testFullName?: string;
        testResult?: number;
        testOutput?: string;
        attachments?: TestRunAttachmentInputData[];
    }
    
    export class TestRunAttachmentInputData implements ITestRunAttachmentInputData {
        fileName?: string;
        contentBase64?: string;
    
        constructor(data?: ITestRunAttachmentInputData) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.fileName = data["fileName"] !== undefined ? data["fileName"] : <any>null;
                this.contentBase64 = data["contentBase64"] !== undefined ? data["contentBase64"] : <any>null;
            }
        }
    
        static fromJS(data: any): TestRunAttachmentInputData {
            let result = new TestRunAttachmentInputData();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
            data["contentBase64"] = this.contentBase64 !== undefined ? this.contentBase64 : <any>null;
            return data; 
        }
    }
    
    export interface ITestRunAttachmentInputData {
        fileName?: string;
        contentBase64?: string;
    }
    
    export class TestRunInputResult implements ITestRunInputResult {
        testSuiteUrl?: string;
        testResultUrl?: string;
    
        constructor(data?: ITestRunInputResult) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.testSuiteUrl = data["testSuiteUrl"] !== undefined ? data["testSuiteUrl"] : <any>null;
                this.testResultUrl = data["testResultUrl"] !== undefined ? data["testResultUrl"] : <any>null;
            }
        }
    
        static fromJS(data: any): TestRunInputResult {
            let result = new TestRunInputResult();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["testSuiteUrl"] = this.testSuiteUrl !== undefined ? this.testSuiteUrl : <any>null;
            data["testResultUrl"] = this.testResultUrl !== undefined ? this.testResultUrl : <any>null;
            return data; 
        }
    }
    
    export interface ITestRunInputResult {
        testSuiteUrl?: string;
        testResultUrl?: string;
    }
    
    export class TestSuiteListData implements ITestSuiteListData {
        testSuiteName?: string;
        buildNumber?: string;
        createdDate?: Date;
    
        constructor(data?: ITestSuiteListData) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.testSuiteName = data["testSuiteName"] !== undefined ? data["testSuiteName"] : <any>null;
                this.buildNumber = data["buildNumber"] !== undefined ? data["buildNumber"] : <any>null;
                this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
            }
        }
    
        static fromJS(data: any): TestSuiteListData {
            let result = new TestSuiteListData();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["testSuiteName"] = this.testSuiteName !== undefined ? this.testSuiteName : <any>null;
            data["buildNumber"] = this.buildNumber !== undefined ? this.buildNumber : <any>null;
            data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
            return data; 
        }
    }
    
    export interface ITestSuiteListData {
        testSuiteName?: string;
        buildNumber?: string;
        createdDate?: Date;
    }
    
    export class TestSuiteOutputData implements ITestSuiteOutputData {
        projectName?: string;
        testSuiteName?: string;
        buildNumber?: string;
        testRuns?: TestRunOutputData[];
    
        constructor(data?: ITestSuiteOutputData) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.projectName = data["projectName"] !== undefined ? data["projectName"] : <any>null;
                this.testSuiteName = data["testSuiteName"] !== undefined ? data["testSuiteName"] : <any>null;
                this.buildNumber = data["buildNumber"] !== undefined ? data["buildNumber"] : <any>null;
                if (data["testRuns"] && data["testRuns"].constructor === Array) {
                    this.testRuns = [];
                    for (let item of data["testRuns"])
                        this.testRuns.push(TestRunOutputData.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): TestSuiteOutputData {
            let result = new TestSuiteOutputData();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["projectName"] = this.projectName !== undefined ? this.projectName : <any>null;
            data["testSuiteName"] = this.testSuiteName !== undefined ? this.testSuiteName : <any>null;
            data["buildNumber"] = this.buildNumber !== undefined ? this.buildNumber : <any>null;
            if (this.testRuns && this.testRuns.constructor === Array) {
                data["testRuns"] = [];
                for (let item of this.testRuns)
                    data["testRuns"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface ITestSuiteOutputData {
        projectName?: string;
        testSuiteName?: string;
        buildNumber?: string;
        testRuns?: TestRunOutputData[];
    }
    
    export class TestRunOutputData implements ITestRunOutputData {
        createdDate?: Date;
        testFullName?: string;
        testResult?: number;
        testOutput?: string;
        isFullTestOutput?: boolean;
        attachments?: TestRunAttachmentOutputData[];
    
        constructor(data?: ITestRunOutputData) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
                this.testFullName = data["testFullName"] !== undefined ? data["testFullName"] : <any>null;
                this.testResult = data["testResult"] !== undefined ? data["testResult"] : <any>null;
                this.testOutput = data["testOutput"] !== undefined ? data["testOutput"] : <any>null;
                this.isFullTestOutput = data["isFullTestOutput"] !== undefined ? data["isFullTestOutput"] : <any>null;
                if (data["attachments"] && data["attachments"].constructor === Array) {
                    this.attachments = [];
                    for (let item of data["attachments"])
                        this.attachments.push(TestRunAttachmentOutputData.fromJS(item));
                }
            }
        }
    
        static fromJS(data: any): TestRunOutputData {
            let result = new TestRunOutputData();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
            data["testFullName"] = this.testFullName !== undefined ? this.testFullName : <any>null;
            data["testResult"] = this.testResult !== undefined ? this.testResult : <any>null;
            data["testOutput"] = this.testOutput !== undefined ? this.testOutput : <any>null;
            data["isFullTestOutput"] = this.isFullTestOutput !== undefined ? this.isFullTestOutput : <any>null;
            if (this.attachments && this.attachments.constructor === Array) {
                data["attachments"] = [];
                for (let item of this.attachments)
                    data["attachments"].push(item.toJSON());
            }
            return data; 
        }
    }
    
    export interface ITestRunOutputData {
        createdDate?: Date;
        testFullName?: string;
        testResult?: number;
        testOutput?: string;
        isFullTestOutput?: boolean;
        attachments?: TestRunAttachmentOutputData[];
    }
    
    export class TestRunAttachmentOutputData implements ITestRunAttachmentOutputData {
        fileName?: string;
        url?: string;
    
        constructor(data?: ITestRunAttachmentOutputData) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.fileName = data["fileName"] !== undefined ? data["fileName"] : <any>null;
                this.url = data["url"] !== undefined ? data["url"] : <any>null;
            }
        }
    
        static fromJS(data: any): TestRunAttachmentOutputData {
            let result = new TestRunAttachmentOutputData();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
            data["url"] = this.url !== undefined ? this.url : <any>null;
            return data; 
        }
    }
    
    export interface ITestRunAttachmentOutputData {
        fileName?: string;
        url?: string;
    }
    
    export class SwaggerException extends Error {
        message: string;
        status: number; 
        response: string; 
        headers: { [key: string]: any; };
        result: any; 
    
        constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
    
        protected isSwaggerException = true;
    
        static isSwaggerException(obj: any): obj is SwaggerException {
            return obj.isSwaggerException === true;
        }
    }
    
    function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, headers, null);
    }
}
